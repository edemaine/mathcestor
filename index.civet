"civet coffeeComment coffeeEq"

declare global
  var fetch: typeof import('undici').fetch

{load as loadCheerio, type Cheerio, type Element} from 'cheerio'
#Civet: remove async
async function fromURL(url: string)
  response := fetch url |> await
  unless response.ok
    throw new Error "Failed to fetch #{url}"
  response.text() |> await |> loadCheerio

type ID = string

interface Person
  id: ID
  name: string
  degree: string
  institution: string
  thesis: string
  year: string
  advisors: ID[]
  descendants: ID[]

# Fetcher based on https://github.com/davidalber/geneagrapher/blob/main/geneagrapher/grabber.py

class Fetcher
  cache = new Map<ID, Person>() #Civet: remove ()
  has(id: ID)
    @cache.has id
  urlFor(id: ID): string
    `https://www.mathgenealogy.org/id.php?id=${id}`

  recurseAdvisors(id: ID)
    return @ if @has id
    person := await @fetch id
    console.log person
    for advisor of person.advisors
      await @recurseAdvisors advisor
    @

  fetch(id: ID): Promise<Person>
    return @cache.get(id)! if @has id
    $ := await fromURL @urlFor id
    degree := $('div[style="line-height: 30px; text-align: center; margin-bottom: 1ex"] > span')
    .first()

    function extractIds(part: Cheerio<Element>): ID[]
      for place of part
        href := $(place).attr 'href'
        continue unless href?
        href.split("=").at(-1)!

    person: Person :=
      id: id
      name: $("h2").text().trim()
      degree: degree.contents().first().text().trim()
      institution: degree.find('span').text().trim()
      thesis: $('#thesisTitle').text().trim()
      year: degree.contents().last().text().trim()
      advisors: extractIds $('p[style="text-align: center; line-height: 2.75ex"]:contains("Advisor") a')
      descendants: extractIds $('table a')
    @cache.set id, person
    person

function main()
  root := process.argv[2]
  unless root
    console.log "Specify a root ID"
    process.exit 1
  new Fetcher()
  .recurseAdvisors root

* as url from 'node:url'
main() if import.meta.url.startsWith('file:') and
          process.argv[1]+'.tsx' == url.fileURLToPath import.meta.url
          #Civet: remove +'.tsx'
